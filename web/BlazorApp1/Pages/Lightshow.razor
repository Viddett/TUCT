@page "/lightshow"

@using BlazorApp1.Data
@using BlazorApp1.Shared

@using System.Text.Json;
@using System.Text.Json.Serialization;

@inject IJSRuntime JS

<h3>Lightshow</h3>

<h4>IP address of tree</h4>
<input type="text" @bind="@field_txt" />

<br />

<button class="btn btn-primary" @onclick=btn_open_lightshow>Open lightshow</button>
<button class="btn btn-primary" @onclick=btn_save_lightshow>Save lightshow</button>
<button class="btn btn-primary" @onclick=btn_send_tree_lightshow>Download to tree</button>
<button class="btn btn-primary" @onclick=btn_upload_tree_lightshow>Upload from tree</button>

<br />

@code {

    // These should be possible to change with some input-fields
    private float hold_time = 0.8f;
    private float transition_time = 0.1f;

    int nr_leds = 14;
    int nr_steps = 5;

    int led_index;

    LED[,] leds;
    bool leds_initated;

    string field_txt;

    protected override async Task OnInitializedAsync()
    {
        // Create empty led-matrix
        leds = new LED[nr_leds, nr_steps];
        for(int L = 0; L < nr_leds; L++)
        {
            for(int step = 0; step < nr_steps; step++)
            {
                leds[L, step] = new LED();
            }
        }
        leds_initated = true;

        // Go print
        System.Diagnostics.Debug.Print("trocaderomust e gött");

    }


    private async Task btn_upload_tree_lightshow()
    {
        // Upload LS from tree
        System.Diagnostics.Debug.Print("uplaod btn");

        Dictionary<String, String> req_dict = new Dictionary<string, string>();

        req_dict.Add("request", "return_custom_ls");

        string req_json = JsonSerializer.Serialize(req_dict);
        var state = await JS.InvokeAsync<string>("set_tree_status2", "192.168.1.96", req_json); //127.0.0.1:5000
        System.Diagnostics.Debug.Print("TREE STATE");

        System.Diagnostics.Debug.Print(state);

        var model = JsonSerializer.Deserialize<Model_LS>(state);

    }


    private async Task btn_open_lightshow()
    {
        // Upload json file of a lightshow from user computer
        System.Diagnostics.Debug.Print("open btn");

    }

    private async Task btn_send_tree_lightshow()
    {
        // Send lightshow to tree
        //TODO

        System.Diagnostics.Debug.Print("sned btn");


        //Dictionary<String, String> req_dict = new Dictionary<string, string>();

        //req_dict.Add("request", "send_custom_ls");

        var req = create_LS_str();

        Dictionary<String, String> req_dict = new Dictionary<string, string>();

        req_dict.Add("request", "set_custom_ls");
        req_dict.Add("lightshow", req);

        string req_json = JsonSerializer.Serialize(req_dict);

        //string req_json = JsonSerializer.Serialize(req);
        var state = await JS.InvokeAsync<string>("set_tree_status2", "192.168.1.96", req_json); //127.0.0.1:5000
        System.Diagnostics.Debug.Print("TREE STATE");

        System.Diagnostics.Debug.Print(state);

        var model = JsonSerializer.Deserialize<Model_LS>(state);


    }


    private async Task btn_save_lightshow()
    {
        // Save lightshow to user
        System.Diagnostics.Debug.Print("Save LS btn");
    }


    private Model_LS create_LS_dict()
    {
        Model_LS res = new Model_LS();

        res.time = new float[5];
        res.time[0] = 0.0f;
        res.time[1] = 1.0f;
        res.time[2] = 2.0f;
        res.time[3] = 3.0f;
        res.time[4] = 4.0f;

        res.leds = new int[14,5,3];

        for (int row = 0; row < 14; row++)
        {
            for(int col = 0; col < 5; col++)
            {
                var rgb = leds[row, col].get_rgb();

                res.leds[row, col, 0] = rgb[0];
                res.leds[row, col, 1] = rgb[1];
                res.leds[row, col, 2] = rgb[2];
            }    
        }


        return res;

    }



    private string create_LS_str()
    {
        string res = "{ 'time':[0.0,1.0,2.0,3.0,4.0],\n 'leds':[";


        for (int row = 0; row < 14; row++)
        {
            if(row > 0)
            {
                res = res + ", ";
            }
            res = res + "[";
            for(int col = 0; col < 5; col++)
            {
                var rgb = leds[row, col].get_rgb();
                string tmp = "[" + rgb[0].ToString() + "," + rgb[1].ToString() + "," + rgb[2].ToString() + "]";
                if (col > 0)
                {
                    res = res + ",";    
                }
                res = res + tmp;
            }    
            res = res + "]";
        }
        res = res + "]}";

        res = res.Replace('\'', '"');

        return res;

    }



}


 <table class="table">

     @for(int row_index=0;row_index<=nr_leds;row_index++){
         <tr>
         @if(row_index==0){
             // Top header
             <th></th>
             @for(int step=0;step<nr_steps;step++){
                 <th>Step @step</th>
             }

         }else{
             // Each LED-row
            <th>LED @row_index</th>
            @for(int step=0;step<nr_steps;step++){
                    <td>
                        @if (leds_initated)
                        {
                            <LedButton led="@leds[row_index-1, step]" />
                        }
                 </td>
             }
         }
         </tr>       
     }
   </table>




