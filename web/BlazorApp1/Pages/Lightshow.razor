@page "/lightshow"

@using BlazorApp1.Data
@using BlazorApp1.Shared


@inject IJSRuntime JS

<h3>lightshow</h3>

<button class="btn btn-primary" @onclick=btn_open_lightshow>Open lightshow</button>
<button class="btn btn-primary" @onclick=btn_save_lightshow>Save lightshow</button>
<button class="btn btn-primary" @onclick=btn_send_tree_lightshow>Download to tree</button>

@code {

    int nr_leds = 12;
    int nr_steps = 5;

    int led_index;

    LED[,] leds;
    bool leds_initated;


    protected override async Task OnInitializedAsync()
    {
        // Create empty led-matrix
        leds = new LED[nr_leds, nr_steps];
        for(int L = 0; L < nr_leds; L++)
        {
            for(int step = 0; step < nr_steps; step++)
            {
                leds[L, step] = new LED();
            }
        }
        leds_initated = true;

        // Go print
        System.Diagnostics.Debug.Print("trocaderomust e gött");

    }

    void btn_save_lightshow()
    {
        // Save the current lightshow as json
        JS.InvokeVoidAsync("glenn_test","gött arg");
    }

    void btn_open_lightshow()
    {
        // Upload json file of a lightshow

    }

    void btn_send_tree_lightshow()
    {
        // Send lightshow to tree
        //TODO
    }


}


 <table class="table">

     @for(int row_index=0;row_index<=nr_leds;row_index++){
         <tr>
         @if(row_index==0){
             // Top header
             <th></th>
             @for(int step=0;step<nr_steps;step++){
                 <th>Step @step</th>
             }

         }else{
             // Each LED-row
            <th>LED @row_index</th>
            @for(int step=0;step<nr_steps;step++){
                    <td>
                        @if (leds_initated)
                        {
                            <LedButton led="@leds[row_index-1, step]" />
                        }
                 </td>
             }
         }
         </tr>       
     }
   </table>




